#!/bin/bash
# Instagram Downloader				# Baixador de Instagram
# created on 2016 by Anders Bateva	# criado em 2016 por Anders Bateva
# https://github.com/andersbateva/Instagram-downloader

function linha_horizontal { printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' $1; }

function extrair_foto {	grep -o '"'$1'": "https://[a-z0-9/\._-]*\.jpg' indice$2.html | cut -d'"' -f4; } #Curiosidade: terminar o link como .jpg.html faz uma arte ASCII da foto.

function extrair_video { grep -o '"'video_url'": "https://[a-z0-9/\._-]*\.mp4' $1 | cut -d'"' -f4; }  # erros por conta de c√≥digos com  "-" acontecem aqui (grep).

function baixar_fotos {
	linha_horizontal -;
	echo "Óè∫ Come√ßando a baixar as imagens (JPGs) de $nome...";
	echo;

	#impress√£o da "r√©gua" de medir as barras de progresso
	{
		echo -n "0    .    ";
		local count=10;
		while (( count < 100 ))
		do
			echo -n "$count    .    ";
			(( count=$count+10 ));
		done
		echo -e "\b100";
	}
	
	local fotos_baixadas=0;
	while read line; do
		local OK=$(wget -nc --user-agent=$user_agent --no-cookies -q --show-progress --progress=bar:noscroll "$line" 2>&1 | grep -o '100%');
		   #silenciosamente, sem sub-diret√≥rios, sem cookie, sem scroll, e sem cobbler
		if [ "$OK" == "100%" ]
		then
			if (( $(( fotos_baixadas % 500 )) == 0 && $fotos_baixadas > 0 )) # informa a cada 500 que deu 500...
			then echo -n " 500";
			fi
			if (( $(( fotos_baixadas % 100 )) == 0 && $fotos_baixadas > 0 )) # d√° quebra de linha de 100 em 100 fotos
			then echo;
			fi
			if  [ $(( fotos_baixadas % 10 )) -eq 0 ] # d√° espa√ßo de 10 em 10 fotos
			then echo -n " ";
			fi
			echo -n "Óà®";
			(( fotos_baixadas++ ))
		fi
	done < Fotos.txt #foto de perfil j√° consta no arquivo
	echo; echo;
	echo "Fotos (novas) baixadas: $fotos_baixadas.";
	# LOG : gravar que foram baixadas $fotos_baixadas da conta $nome
}

function baixar_videos {
	gerencia_diretorio Videos;
	linha_horizontal -;
	rm -f Paginas_Videos.txt;
	echo "Óè∫ Come√ßando a baixar os v√≠deos  (MP4s) de $nome... Se nada acontecer, n√£o h√° novos v√≠deos.";
	
	while read line #acrescentar a URL antes do c√≥digo, para poder baixar as p√°ginas dos v√≠deos
	do
    	echo "https://www.instagram.com/p/$line" >> Paginas_Videos.txt;
	done < ../Codigos_Videos.txt
	
	local indices_videos_baixados=0;
	while read line; do
		wget -nc --user-agent=$user_agent --no-cookies -q "$line";
		(( indices_videos_baixados++ ));
		echo -n -e "\rÓÄû P√°ginas de v√≠deo baixadas: $indices_videos_baixados";
	done < Paginas_Videos.txt
	echo;
	
	while read line
	do
    	extrair_video "$line" >> URLs_Videos.txt; # erros por conta de c√≥digos com  "-" acontecem aqui (grep).
	done < ../Codigos_Videos.txt
	
	local videos_baixados=0;
	while read line; do
		echo -e "ÓÄû V√≠deos baixados: $videos_baixados";
		wget -nc --user-agent=$user_agent --no-cookies -q --show-progress --progress=bar:noscroll "$line";
		# Nota: barra de progresso √© o adequado para os v√≠deos. Eles s√£o umas 20x maiores que as fotos (download demorado).
		if (( "$?" == "0" ))
		then
			tput cuu1; tput el; #sobe uma linha e apaga o conte√∫do dela - barra de progresso.
			tput cuu1; tput el; #sobe uma linha e apaga o conte√∫do dela - "v√≠deo baixados...".
		fi
		(( videos_baixados++ ));
	done < URLs_Videos.txt
	echo -e "ÓÄû V√≠deos baixados: $videos_baixados"; #como isso √© apagado a cada ciclo, no √∫ltimo tem que imprimir de novo
	
	cd ..; #Saindo da pasta "Videos"
}

function baixar_indices {
	contador_indices=1; #contador de p√°gina atual
	
	local prox_pag=true; #s√≥ pra poder entrar no ciclo pela primeira vez
	
	echo "Vai come√ßar o download do(s) √≠ndice(s), e extra√ß√£o de endere√ßos (URL) das m√≠dias...";
	local total_estimado_indices=$(($midias/12));
	if (( $midias%12 > 0))
		then (( total_estimado_indices++ ));
	fi
	
	while [ "$prox_pag" == "true" ] #enquanto tiver pr√≥xima p√°gina...
	do
		echo -n -e "\rÓÄû √çndices baixados: $contador_indices / $total_estimado_indices";
		prox_pag=$(grep -o ", \"has_next_page\": [a-z]*\}," indice$contador_indices.html | grep -o -e true -e false); #verificando se o √≠ndice atual informa haver pr√≥ximo √≠ndice
		
		if [ "$prox_pag" == "true" ] #h√° pr√≥xima p√°gina?
		then
			local ult_img_pag=$(grep -o ", \"end_cursor\": \"[0-9]*\"," indice$contador_indices.html | grep -o "[0-9]*"); # extraindo da p√°gina atual o c√≥digo da pr√≥xima (√© a √∫ltima imagem da p√°gina atual)
			(( contador_indices++ )); #define a pr√≥xima (incrementa)
			local saida_wget=$(wget --user-agent=$user_agent --server-response -q --no-cookies -O indice$contador_indices.html https://www.instagram.com/$nome/?max_id=$ult_img_pag 2>&1 | grep -o "Connection: .*" - );
		fi
	done
	if [ $total_estimado_indices == $contador_indices ]
		then
			echo ". ‚úî";
			return 0;
		else
			if [ "$saida_wget" == "Connection: close" ]
				then echo ". ‚úó Conex√£o fechada pelo Instagram.";
				else echo ". ‚úó $saida_wget.";
			fi
			echo "$nome - $(date) - ERRO: nem todos os √≠ndices foram baixados ($contador_indices / $total_estimado_indices)." >> ../../historico.txt;
			return 1;
	fi
}

function extrair_todas_fotos {
	local indices_percorridos=1;
	
	while (( $indices_percorridos <= $contador_indices ))
	do
		extrair_foto display_src $indices_percorridos >> ../Fotos.txt;
		local total_fotos=$(wc -l < ../Fotos.txt);
		(( total_fotos-- ));
		echo -n -e "\rÓÄû Fotos  extra√≠das: $total_fotos / $midias";
		(( indices_percorridos++ ));
	done
	
	if [ $total_fotos == $midias ]
	then echo ". ‚úî";
	else echo ". ‚úó";
	fi
}

function extrair_codes_v√≠deos {
	local indices_percorridos=1;
	> ../Codigos_Videos.txt; #deletando o conte√∫do da lista
	
	local  total_videos=0;
	local  total_videos_old=-1; #pra poder os valores ficarem diferentes e imprimir que tem zero v√≠deos
	
	while (( $indices_percorridos <= $contador_indices ))
	do #extrair ciclicamente os v√≠deos, √≠ndice-a-√≠ndice
	
		#extra√ß√£o de 1 √∫nico √≠ndice
		{ #MELHORAR: realmente s√≥ extrair o v√≠deo, e n√£o fazer toda essa manipula√ß√£o de objeto JS
			local videos_indice_atual=$(grep -o '"is_video": true,' indice$indices_percorridos.html | wc -l); #contagem de v√≠deos no √≠ndice atual
	
			if [ $videos_indice_atual -gt 0 ] #sem v√≠deos no √≠ndice, sem extra√ß√£o
			then
				local videos_indice_extraidos=0;
				local campo_processar=1; #cada objeto √© um campo  no JSON
		
				while [ $campo_processar -le 12 ]
				do
					local objeto_atual=$(grep -oP '(?<={"code":).*?(?=}, {"code":|}]},)' indice$indices_percorridos.html | cut -d$'\n' -f$campo_processar);
					local is_video=$(echo $objeto_atual | grep -o '"is_video": true' | grep -o true);
			
					if [ "$is_video" == "true" ] #se o objeto atual √© um v√≠deo...
						then echo $objeto_atual | cut -d'"' -f2 >> ../Codigos_Videos.txt;
					fi

					(( campo_processar++ ));
				done
			fi
		}
	
		local total_videos=$(wc -l < ../Codigos_Videos.txt);
		if [ $total_videos -ne $total_videos_old ]
		then #impedir impress√£o repetitiva dos mesmos totais de v√≠deos extra√≠dos
			echo -n -e "\rÓÄû V√≠deos extra√≠dos: $total_videos / ?";
			total_videos_old=$total_videos;
		fi
		
		(( indices_percorridos++ ));
	done
	echo ".";
}

function prompt_nome_da_conta {
	clear;
	echo "Instagram Downloader - dev 0.6 (11 de setembro de 2016)";
	linha_horizontal =;
	
	echo -n "Informe o "; setterm -underline on; echo -n "nome"; setterm -underline off; echo    " da conta-alvo. O script baixar√° todas as m√≠dias dentro de uma pasta.";
	
	echo -n "ÓÄû o nome da conta fica na URL em \"instagram.com/<"; setterm -underline on; echo -n "nome"; setterm -underline off; echo   ">\";";
	echo "ÓÄû as m√≠dias s√£o fotos (JPG) e v√≠deos (MP4);";
	read -p "Óåì Conta-alvo: " nome;
	linha_horizontal -;
}

function verificar_conta_existe {
	wget --delete-after --user-agent=$user_agent --no-cookies -q https://www.instagram.com/$nome/; #baixa o √≠ndice 1 e deleta depois
	
	if [ $? -ne 0 ] #testando se o download do √≠ndice n√£o deu certo
	then #se n√£o deu certo (retornos 1~8)...
		echo "Parece que a conta n√£o existe! üôÅ";
		echo " Resolu√ß√£o de problemas. Fa√ßa na ordem:";
		echo " ÓÜΩ digitou certo? Verifique, e se digitou errado, tente outra vez;";
		echo " ÓÜæ a conex√£o com a internet, como vai? Verifique, e corrija se houver problemas;";
		echo " ÓÜø a conta foi renomeada? Se o nome realmente √© este, pode ser que a(o) dona(o) mudou o nome dela, e voc√™ precisar√° buscar pelo novo nome. Se a renomea√ß√£o foi recente, talvez n√£o apare√ßa (ainda) em resultados de busca fora do Instagram;";
		echo " ÓáÄ a conta foi removida? Se n√£o for poss√≠vel encontrar o novo nome da conta, mesmo depois de algum tempo, pode ser que a conta tenha sido deletada pelo(a) dono(a). Se a(o) dona(o) n√£o decidir criar outra, √© fim da linha, guarde as m√≠dias que voc√™ j√° baixou e busque outras contas interessantes para voc√™.";
		echo;
		echo "Para realizar as buscas acima sugeridas, voc√™ deve usar seu navegador de internet, pois o script n√£o lida com isso.";
		echo;
		echo " ÓÄû Dica: buscar o \"nome de documento\" (e varia√ß√µes) da(o) dona(o) da conta-alvo pode ajudar, pois o Instagram pertence ao Facebook, e o Facebook tem uma \"pol√≠tica de nome real\". Fazer uma busca reversa de imagens pode ajudar tamb√©m.";
		echo " ÓÄû Privacidade: caso seja um objetivo seu manter-se an√¥nimo, atente-se para o fato de que, ao buscar, os sites que voc√™ usar poder√£o usar seu navegador para lhe identificar, atrav√©s de cookies. O script n√£o usa cookies, mas se voc√™ √© identificado no navegador e depois algu√©m usa o script para baixar aquela mesma conta que voc√™ buscou, pode ser que voc√™ seja relacionado ao download.";
		denovo_denovo;
		#despedida;
	else
		echo -n "Conta encontrada! ";  #se deu certo (retorno 0 do wget)...
		return 0;
	fi
}

function data_mais_recente {
	local data_mais_recente=$(echo $(grep -o '"date": [0-9]*,' indice$1.html | grep -o '[0-9]*')| cut -d" " -f1);
	date -d @$data_mais_recente;
}

function confirmar_identidade {
	echo "√â esta?";
	
	echo -n " ‚îÇ Nome  : ";
	echo -e $(grep -o '"full_name": "[^"]*"' indice1.html | cut -d: -f2 | grep -o '".*"' | grep -o '[^"]*');
	
	echo -n " ‚îÇ Bio   : ";
	local bio=$(grep -o '"biography": "[^"]*"' indice1.html | cut -d: -f2- | cut -d' ' -f2-); # PROBLEMA: bios com aspas ficam quebradas.
	if [ "$bio" == "" ] #pra n√£o dar erro em biografia vazia...
	then echo " ";
	else echo -e $bio;
	fi
		
	echo -n " ‚îÇ M√≠dias: ";
	midias=$(grep -o '"media": {"count": [0-9]*,' indice1.html | grep -o '[0-9]*');
	echo -n $midias;
	if (( "$midias" -ne "" ))
	then
		echo -n " (indices:";
		local total_estimado_indices=$(($midias/12));
		if (( $midias%12 > 0))
			then (( total_estimado_indices++ ));
		fi
		echo -n "$total_estimado_indices";
		echo -n ")";
		echo -n "	-	 mais recente: "; data_mais_recente 1;
	else echo;
	fi
	
	read -p "Óåì (sim/n√£o): " confirmada;
	case  $confirmada in
	sim|Sim|s|S)
		echo "Identidade confirmada.";
	;;
	n√£o|N√£o|n|N)
		echo "Identidade negada. Pressione qualquer tecla para rodar o script novamente. CTRL+C para encerrar.";
		cd ..;
		cd ..;
		read;
		main;
	;;
	*)
		echo "N√£o entendi o que voc√™ escreveu. Por favor, escreva apenas \"sim\" ou \"n√£o\".";
		confirmar_identidade;
	;;
	esac
	linha_horizontal -;
}

function extrair_foto_perfil { #extra√ß√£o da foto de perfil: HD se tiver, normal se n√£o tiver HD
	local perfil_hd=$( extrair_foto profile_pic_url_hd 1);
	if [ "$perfil_hd" == "" ]
		then extrair_foto profile_pic_url 1 > ../Fotos.txt;
		else extrair_foto profile_pic_url_hd 1 > ../Fotos.txt;
	fi
}

function verificar_conta_privada {
	local privada=$(grep -o ", \"is_private\": [a-z]*," indice1.html | grep -o -e true -e false); #verificando se a conta √© privada ou n√£o
	if [ $privada == 'true' ] #informando ao usu√°rio se dar√° pra baixar ou n√£o
	then
		echo "Conta privada! üòû ";
		# LOG : gravar que a conta $nome √© privada
		cd ..; #saindo do diret√≥rio de √≠ndices
		wget --user-agent=$user_agent -nc --no-cookies -q -i Fotos.txt;
		echo "A √∫nica coisa que esse script podia fazer, fez: baixar a foto de perfil.";
		echo "N√£o √© poss√≠vel fazer mais pois contas privadas precisam de login e aprova√ß√£o para serem visualizadas.";
		echo;
		echo "Que tal voc√™ buscar outra conta para baixar as m√≠dias: uma que seja p√∫blica?";
		echo "Alternativamente (se voc√™ realmente faz quest√£o de ver essa conta), voc√™ pode tentar novamente no futuro: quem sabe o/a dono(a) da conta muda de ideia e torna a conta p√∫blica?";
		cd ..; #saindo do diret√≥rio $nome
		denovo_denovo;
		#despedida;
	else # se a conta n√£o for privada...
		return 0; #prosseguir com o script
	fi
}

function verificar_conta_zerada {
	if [ $midias -eq 0 ]
	then
		echo "Conta zerada! ÓÄè Sem nenhuma m√≠dia, o script n√£o tem o que fazer.";
		# LOG : gravar que a conta $nome est√° zerada
		cd ..; #saindo da pasta √≠ndices
		cd ..; #saindo da pasta $nome
		denovo_denovo;
	else # se a conta tiver pelo menos 1 foto
		return 0; #prosseguir com o script
	fi
}

function despedida {
	echo;
	echo "‚úó Conclu√≠do sem sucesso.";
	linha_horizontal -;
	exit 1;
}

function gerencia_diretorio {
	if [ ! -d "$1" ] #testando  se o diret√≥rio informado N√ÉO existe
	then
		mkdir $1; #criando diret√≥rio
		cd $1; #entrando no diret√≥rio
		return 0;
	else #se o diret√≥rio j√° existia
		cd $1;
		return 1;
	fi
}

function denovo_denovo {
	linha_horizontal -;
	read -p "Pressione qualquer tecla para rodar o script de novo, ou d√™ CTRL+C para encerrar.";
	main;
}

function verificar_fotos_novas {
	gerencia_diretorio $nome;
	local status_nome=$?; # 0=n√£o existia; 1=existia
# diret√≥rio: $nome

	if [ $status_nome -eq 1 ] #se j√° existia o diret√≥rio com o nome da conta
	then
		echo -n "Diret√≥rios: ";
		echo -n "‚úî $nome; ";
		
		gerencia_diretorio Indices;
		local status_indices=$?; # 0=n√£o existia; 1=existia
# diret√≥rio: Indices
		if [ $status_indices == 1 ] #Se j√° existia o diret√≥rio de √≠ndices
		then
			echo -n "‚úî Indices. ";
			
			if [ -f indice1.html ] #Se j√° existia o indice1.html
			then
				echo "Encontrado indice1.html.";
				wget --user-agent=$user_agent --no-cookies -q -O indice1_new.html https://www.instagram.com/$nome/; #baixando o indice1 da conta, silenciosamente
				
				grep -o '"'display_src'": "https://[a-z0-9/\._-]*\.jpg' indice1.html | cut -d'"' -f4 | grep -o "/[0-9_]*_n\.jpg" | cut -d/ -f2 > ../Fotos_old.txt; #corta as URLs das fotos, pegando s√≥ os nomes das fotos
				grep -o '"'display_src'": "https://[a-z0-9/\._-]*\.jpg' indice1_new.html | cut -d'"' -f4 | grep -o "/[0-9_]*_n\.jpg" | cut -d/ -f2 > ../Fotos_new.txt; #corta as URLs das fotos, pegando s√≥ os nomes das fotos
				
				local cont_indices_iguais=$(diff ../Fotos_old.txt ../Fotos_new.txt | grep -c "> .*"); # s√≥ dar√° alguma sa√≠da quando forem diferentes.
				if (( "$cont_indices_iguais" > 0 )) #se n√£o for nulo, os arquivos s√£o diferentes
				then
					echo "‚úî H√° $cont_indices_iguais fotos novas no indice1.html!";
					{
						echo -n "  ÓÄû M√≠dia mais recente no servidor: "; data_mais_recente 1_new;
						echo -n "  ÓÄû M√≠dia mais recente localmente : "; data_mais_recente 1;
					}
					echo "  O script vai seguir a execu√ß√£o normal.";
				else
					echo -n "‚úó N√£o h√° fotos novas no indice1.html.";
					echo -n " M√≠dia mais recente: "; data_mais_recente 1;
					echo    "  Sem fotos novas, n√£o tem porqu√™ o script prosseguir.";
					echo    "ÓÄû Se voc√™ quiser for√ßar o download de todos os √≠ndices, simplesmente exclua o indice1.html e rode o script de novo";
					echo "  Isso √© √∫til no caso de nem todas as m√≠dias novas terem sido baixadas da √∫ltima vez.";
					rm -f ../Fotos_old.txt ../Fotos_new.txt indice1_new.html;
					cd ..; # saindo do diretorio Indices
					cd ..; # saindo do diretorio $nome
					echo "$nome - $(date) - nenhuma m√≠dia nova." >> historico.txt;
					denovo_denovo;
				fi
			else
				echo "N√£o encontrado indice1.html.";
			fi
			
		else
			echo -n "‚úó Indices ."; # encerra as verifica√ß√µes e volta pro main, diret√≥rio Indices
		fi
	else 					#se n√£o existia o diret√≥rio com o nome da conta
		echo "Diret√≥rio n√£o.";
		gerencia_diretorio Indices; #se n√£o tem diret√≥rio $nome, n√£o tem diret√≥rio Indices dentro...
		#encerra as verifica√ß√µes e volta pro main, diret√≥rio Indices
	fi
}

function main {
	readonly user_agent="Wget"; #se n√£o puser assim, o script informa detalhes demais, como a vers√£o e onde foi compilado

#um monte de verifica√ß√µes necess√°rias para prevenir todo tipo de erro
	{
	# diret√≥rio: padr√£o
		if [ ! -f "historico.txt" ] #testando  se j√° existe LOG
			then echo -n "" > historico.txt;
		fi
		
		prompt_nome_da_conta;   #solicita o nome da conta-alvo para o usu√°rio
		verificar_conta_existe; #se a conta informada n√£o existe, o script encerra-se
	# diret√≥rio: $nome, Indices
		verificar_fotos_novas;  #se n√£o tiver fotos novas na conta, o script encerra-se	
		wget --user-agent=$user_agent --no-cookies -q -O indice1.html https://www.instagram.com/$nome/; #baixando o indice1 da conta, silenciosamente
		confirmar_identidade;	
		extrair_foto_perfil;  #se a conta est√° certa , baixa a foto de perfil
	
		# verificando se as outras fotos s√£o inacess√≠veis ou inexistentes:
		verificar_conta_privada; #se a conta √© privada, o script encerra-se
		verificar_conta_zerada;  #se a conta √© zerada , o script encerra-se
	}
#os downloads, propriamente ditos	
	{
		setterm -cursor off;
		baixar_indices;
		extrair_todas_fotos;  #diretamente JPG
		extrair_codes_v√≠deos; #c√≥digo (code) apenas... Depois tem que baixar as p√°ginas, extrair url, e baixar
		
		cd ..; #saindo do diret√≥rio "√çndices", para come√ßar os downloads
	# diret√≥rio: $nome
		sleep 3;
	
		baixar_fotos;
		local total_videos=$(wc -l < Codigos_Videos.txt);
		if [ $total_videos -gt 0 ]
			then baixar_videos;
		fi
		linha_horizontal -;
		# LOG : gravar que foram baixados N videos da conta $nome
		
	#diret√≥rio: $nome
	}
#uma despedida
	{
		cd ..; # saindo do diret√≥rio $nome
		echo "‚úî Conclu√≠do com sucesso!";
		setterm -cursor on;
		echo "Quando voc√™ rodar o script da pr√≥xima vez para $nome, somente m√≠dias novas ser√£o baixadas.";
		notify-send "Instagram Downloader: conclu√≠do com sucesso.";
		denovo_denovo;
	}
}
main;
